# -*- coding: utf8 -*-
"""
    here only functions as bot-commands (!cmd) with obj of check_message.Msg as arg:
        async def cmd(msg)
"""
import discord
import sys

import other
import constants as C
import local_memory as ram
import people
import log
import event_funs as ev
import manager
import emj
import communication as com

_Msg = manager.Msg
roll_cmds = {'roll', 'rollw', 'rollv', 'r', 'rw', 'rv', }
free_cmds = {'help', 'ignore', }
free_cmds.update(roll_cmds)
admin_cmds = {
    'unsilence_all',
    'channel', 'unchannel', 'report', 'unreport', 'say', 'sayf', 'emoji', 'dominate',
    'purge', 'purge_aft', 'purge_ere', 'purge_bet', 'embrace', 'get_offtime', 'get_offlines',
    'deny', 'undeny', 'mute', 'unmute', 'mute_list', 'mute_l', 'unmute_l', 'mute_l_list',
}
admin_cmds.update(free_cmds)
primogenat_cmds = {'help', 'silence', 'unsilence', 'kick'}


# region Free
async def help(msg: _Msg):
    """\
    !help: –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–π —Ö–µ–ª–ø
    !help cmd*: –ø–æ–∏—Å–∫ —Ö–µ–ª–ø–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –∫–æ–º–∞–Ω–¥–∞–º \
    """
    module = sys.modules[__name__]
    # module_attrs = dir(module)
    # cmds = set(key for key in module_attrs if key[0] != '_' and callable(getattr(module, key)))
    # if not msg.admin:
    #     cmds.intersection_update(free_cmds)
    cmds = msg.get_commands()
    flt = {'free': free_cmds, 'admin': admin_cmds, 'super': only_super,
           'primogenat': primogenat_cmds, 'primogen': primogenat_cmds,
           'r': {'r', 'rw', 'rv'}, }
    if len(msg.args) > 1:
        ln = 1
        if msg.args[1] in flt:
            cmds.intersection_update(flt[msg.args[1]])
            ln = 2
        if msg.args[ln:]:
            cmds = {cmd for cmd in cmds if any(arg in cmd for arg in msg.args[ln:])}
        # cmds.intersection_update(set(msg.text.split()[1:]))

    texts = []
    comf_help = ''
    docs = []
    if cmds:
        if msg.admin and any((cmds == all_cmds, cmds == only_super, cmds == admin_cmds)):
            texts.append(('''```css
            –£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
                ch - id, –æ–±—Ä–∞—â–µ–Ω–∏–µ (#channel) –∏–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤;
                usr - id, –æ–±—Ä–∞—â–µ–Ω–∏–µ (@name), –∏–ª–∏ –ª—é–±–æ–π –∏–∑ –Ω–∏–∫–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ 
                    (–Ω–∞–ø—Ä–∏–º–µ—Ä Soul, Soulcapturer –∏–ª–∏ Soulcapturer#2253);
                username - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ usr, –Ω–æ –º–æ–∂–Ω–æ –∏ –Ω–∏–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏;
                role - id, –æ–±—Ä–∞—â–µ–Ω–∏–µ (@role) –∏–ª–∏ –∏–º—è —Ä–æ–ª–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ ;
                msg - id —Å–æ–æ–±—â–µ–Ω–∏—è;
                cmd - –∏–º—è –∫–æ–º–∞–Ω–¥—ã, –∏–∑–≤–µ—Å—Ç–Ω–æ–π –±–æ—Ç—É;
                text - –ø—Ä–æ—Å—Ç–æ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç;
                * - –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–º
                (–Ω–∞–ø—Ä–∏–º–µ—Ä ch* = ch1 ch2 ch3...; usr* = usr1 usr2 usr3...);
            ```''').replace('            ', ''))
        if cmds.intersection(roll_cmds):
            texts.append((r'''```css
            –•–µ–ª–ø –ø–æ –±—Ä–æ—Å–∫–∞–º –¥–∞–π—Å–æ–≤ (!roll, !rollw, !rollv, !r, !rw, !rv):
                !roll, !rollw, !rollv - –≤—ã–≤–æ–¥—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–æ–≤ –≤ —Å—Ç–æ–ª–±–µ—Ü;
                !r, !rw, !rv - –∏–º–µ—é—Ç —Ç–æ—Ç –∂–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ, 
                    –Ω–æ –≤—ã–≤–æ–¥—è—Ç –∫—É–±—ã –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—Ä–æ—Å–∞—Ç—å –±–æ–ª—å—à–µ –∫—É–±–æ–≤ –∑–∞ —Ä–∞–∑;
                !–∫–æ–º–∞–Ω–¥–∞ —Öd—É - –ø—Ä–æ—Å—Ç–∏ –∫–∏–Ω–µ—Ç x –∫—É–±–æ–≤ y, –±–µ–∑ –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    (–µ—Å–ª–∏ –Ω—É —É–∫–∞–∑–∞–Ω d—É - –±–µ—Ä—ë—Ç—Å—è d10)
                ‚Ä¢ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å, —Ç–∏–ø —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—ã,
                —Ç–æ –±—É–¥—É—Ç –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —É—Å–ø–µ—Ö–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å y/2+1,
                —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - '>=')
                !roll +N xdy - –∫ –∫–∞–∂–¥–æ–º—É –∫—É–±—É –¥–æ–±–∞–≤–∏—Ç—Å—è N
                !roll -N xdy - –∫ –∫–∞–∂–¥–æ–º—É –∫—É–±—É –≤—ã—á—Ç–µ—Ç—Å—è N
                !roll xdy+ - –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –±—Ä–æ—Å–∫–∞
                !roll xdy+N - –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –±—Ä–æ—Å–∫–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å N
                    –µ—Å–ª–∏ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—É–º–º—ã —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏,
                    —Ç–æ –±—É–¥—É—Ç —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –ø–æ –Ω–µ–π –±—Ä–æ—Å–∫–∏;
                !roll x1dy1 x2dy2 x3dy3... - –±—Ä–æ—Å–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –∫—É–±–æ–≤ –∑–∞ —Ä–∞–∑
                    –µ—Å–ª–∏ —Ö–æ—Ç—å —É –æ–¥–Ω–æ–≥–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —Å—É–º–º–∞, —Ç–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —É –≤—Å–µ—Ö;
                    –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —É–∫–∞–∑–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—É–º–º–∞, –±—É–¥–µ—Ç —Å—É–º–º–∞ —É—Å–ø–µ—Ö–æ–≤;
                !roll x1dy1 - x2dy2
                    –≤—ã—á–µ—Å—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ;
                    –ø—Ä–∏–º–µ–Ω–∏–º—ã –ø—Ä–∞–≤–∏–ª–∞ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—É–º–º—ã –∏ —É—Å–ø–µ—Ö–æ–≤;
            ```''').replace('            ', ''))
            texts.append((r'''```css
                –î–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –≤—Å–µ—Ö –±—Ä–æ—Å–∫–æ–≤) 
                    –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ (–¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞).
                –ú–µ–∂–¥—É —Å–æ–±–æ–π —Å–º–µ—à–∏–≤–∞—é—Ç—Å—è –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤,
                    –Ω–∞–ø—Ä–∏–º–µ—Ä: 'sh', 'fsph', 'hf3', 'f1vh' –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ;
                sp/p/v/s - '–±–æ–Ω—É—Å—ã' –ø—Ä–∏ –º–∞–∫—Å –≥—Ä–∞–Ω–∏ –∫—É–±–∞ (10 –¥–ª—è d10) –µ—Å–ª–∏ —ç—Ç–æ —É—Å–ø–µ—Ö:
                    sp - +1 –¥–æ–ø —É—Å–ø–µ—Ö
                    p - +1 –¥–æ–ø —É—Å–ø–µ—Ö –∑–∞ –∫–∞–∂–¥—É—é –ø–∞—Ä—É (–¥–ª—è d10 - –≤—Å–µ–≥–æ 3 —É—Å–ø–µ—Ö–∞ –∑–∞ –¥–≤–µ 10)
                    v - +2 –¥–æ–ø —É—Å–ø–µ—Ö–∞ –∑–∞ –∫–∞–∂–¥—É—é –ø–∞—Ä—É (–∞–ª—è –º–µ—Ö–∞–Ω–∏–∫–∞ V5)
                    s - –¥–æ–ø –±—Ä–æ—Å–∫–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ), —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ú–¢
                    ‚Ä¢ –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö –≤–∫–ª –ø–æ–¥—Å—á—ë—Ç —É—Å–ø–µ—Ö–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –ª–∏—à—å –∫–æ–ª-–≤–æ –∫—É–±–æ–≤
                    ‚Ä¢ –∏–∑ –≤—Å–µ—Ö –Ω–∏—Ö –∑–∞ —Ä–∞–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏—à—å –æ–¥–∏–Ω –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä
                fx  - –æ—Ç–Ω–∏–º–∞–µ—Ç —É—Å–ø–µ—Ö–∏ –∑–∞ –±—Ä–æ—Å–∫–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ x; –≤–∫–ª –ø–æ–¥—Å—á—ë—Ç —É—Å–ø–µ—Ö–æ–≤;
                f   - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ 'f1'; 
                    ‚Ä¢ !rollw (!rw) –∏–¥—ë—Ç —Å –≤–∫–ª 'f' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                h   - –≤—ã–≤–æ–¥ –∫—É–±–æ–≤ —Å —Ç—ç–≥–æ–º @here 
                    (—á—Ç–æ –≤–∫–ª—é—á–∏—Ç –∂—ë–ª—Ç—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö - —É–¥–æ–±–Ω–æ –¥–ª—è —Å—Ç—Ä–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥);
                !rollw (!rw) –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ !roll (!r), –Ω–æ —É–∂–µ —Å–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º 'f'
                    (–∏ –ø–æ—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å —É—Å–ø–µ—Ö–∏)
                !rollv (!rv) –±—Ä–æ—Å–∞–µ—Ç –∫—É–±—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º V5 (–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã –≤–º–µ—Å—Ç–æ —Ü–∏—Ñ—Ä),
                    –ø–æ—Ç–æ–º—É –≤—Å–µ –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–æ–º–µ 'h' –Ω–µ –∏–º–µ—é—Ç –¥–ª—è –Ω–µ—ë —Å–º—ã—Å–ª–∞
                !–∫–æ–º–∞–Ω–¥–∞ (–±–µ–∑ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) - –≤—ã–≤–µ–¥–µ—Ç —Ö–µ–ª–ø —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ
            ```''').replace('            ', ''))
        docs = [getattr(module, cmd).__doc__ for cmd in cmds]
        comf_help = other.comfortable_help(docs)

    if not cmds or not comf_help:
        texts = '–£–≤—ã, —Å —ç—Ç–∏–º –Ω–∏—á–µ–º –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å :sweat:'
    else:
        texts += other.comfortable_help(docs)

    await msg.qanswer(texts)


async def ignore(msg: _Msg): # TODO more phrases here
    """\
    !ignore: –≤–∫–ª/–≤—ã–∫–ª –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–µ–∫–∫–µ—Ç–æ–º —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π \
    """
    if msg.author in ram.ignore_users:
        ram.ignore_users.remove(msg.author)
        if msg.author == C.users['cycl0ne']:
            await msg.answer("–ú—è–≤, –≤—Ä–µ–º—è –∞–º–Ω–∏—Å—Ç–∏–∏ üò∫?")
        else:
            await msg.answer("–ß—Ç–æ, –∫—Ç–æ-—Ç–æ –ø–æ –º–Ω–µ —Å–æ—Å–∫—É—á–∏–ª—Å—è :relaxed:?")
    else:
        ram.ignore_users.add(msg.author)
        if msg.author == C.users['cycl0ne']:
            await msg.answer("–Ø –∫ —Ç–µ–±–µ —Å–æ –≤—Å–µ–π –¥—É—à–æ–π, –∞ —Ç—ã... üòø")
        else:
            await msg.answer("–ù–µ —Ö–æ—á–µ—à—å —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å, –Ω—É –∏ –Ω–µ –Ω–∞–¥–æ :confused:.")


# async def roll(msg: _msg):
#     """\
#     !roll —Öd—É: –∫–∏–Ω—É—Ç—å x –∫—É–±–∏–∫–æ–≤-y \
#     """
#     if len(msg.args) < 2:
#         msg.args.append('1d10')
#     rollrange = msg.args[1].split('d')
#     if len(rollrange) == 2 and all(i.isdigit() for i in rollrange):
#         count, dice = int(rollrange[0]), int(rollrange[1])
#         if count > 21:
#             await msg.answer('–ü–µ—Ä–µ–±–æ—Ä, —è –≤—ã–∏–≥—Ä–∞–ª :slight_smile:')
#             return
#
#         dices = []
#         for i in range(0, count):
#             dices += ['{:02d}'.format(i + 1), 'd:\t', str(random.randint(1, dice)), '\n']
#         await msg.qanswer("```" + ''.join(dices) + "```")
#     else:
#         await msg.qanswer(other.comfortable_help([str(roll.__doc__)]))


async def roll(msg: _Msg):
    """\
    !roll —Ö: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ d10
    !roll d—É: –∫–∏–Ω—É—Ç—å –æ–¥–∏–Ω –∫—É–± y
    !roll —Öd—É: –∫–∏–Ω—É—Ç—å x –∫—É–±–∏–∫–æ–≤-y
    !roll —Ö diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ d10 >= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff
    !roll —Öd—É diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y >= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff
    !roll —Öd—É rel: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y rel(>,<,==, etc) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (y/2+1)
    !roll —Öd—É rel diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é rel(>,<,==, etc) –∫ diff —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    !roll -//- [spvfh]: –∫–∏–Ω—É—Ç—å –∫—É–±—ã —Å –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Å–º. !help roll)
    !roll +(-)A -//-//-: –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∫–∞–∂–¥–æ–≥–æ –∫—É–±–∞ –¥–æ–±–∞–≤–∏—Ç—å (–æ—Ç–Ω—è—Ç—å) A
    !roll —Öd—É+ -//-//- : —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–∞–Ω–∞)
    !roll —Öd—É+(-)B -//-: —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –¥–æ–±–∞–≤–∏—Ç—å (–æ—Ç–Ω—è—Ç—å) B
    """

    error, count, max_dtype, all_flags, simple, calc_sum, rolls_args = manager.get_dice_param(msg.text[len('!roll '):])

    if not error:

            if count > 21:
                if count > 121:
                    await msg.answer('<@{}>, —É —Ç–µ–±—è –ø–µ—Ä–µ–±–æ—Ä, —è –≤—ã–∏–≥—Ä–∞–ª üôÇ'.format(msg.author))
                else:
                    await msg.answer('–¢–∞–∫ –º–Ω–æ–≥–æ –∫—É–±–æ–≤... –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç `!r` –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, <@{}>? ü§î'.format(msg.author))
                return

            if max_dtype > C.i10__42:
                await msg.answer('–ù—É, <@{}>, **—Ç–∞–∫–∏—Ö** –¥–∞–π—Å–æ–≤ –º–Ω–µ –Ω–µ –∑–∞–≤–µ–∑–ª–∏ üòï'.format(msg.author))
                return

            text = [('<@{}>, @here,\n```diff\n' if 'h' in all_flags else '<@{}>,\n```diff\n').format(msg.author)]
            text += manager.get_dices(rolls_args, simple=simple, calc_sum=calc_sum)
            text.append('```')

            await msg.qanswer(''.join(text))

    if error:
        await msg.qanswer(other.comfortable_help([str(roll.__doc__)]))
        return


async def r(msg: _Msg):
    """\
    !r —Ö: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ d10
    !r d—É: –∫–∏–Ω—É—Ç—å –æ–¥–∏–Ω –∫—É–± y
    !r —Öd—É: –∫–∏–Ω—É—Ç—å x –∫—É–±–∏–∫–æ–≤-y
    !r —Ö diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ d10 >= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff
    !r —Öd—É diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y >= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff
    !r —Öd—É rel: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y rel(>,<,==, etc) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (y/2+1)
    !r —Öd—É rel diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é rel(>,<,==, etc) –∫ diff —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    !r -//- [spvfh]: –∫–∏–Ω—É—Ç—å –∫—É–±—ã —Å –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Å–º. !help r)
    !r +(-)A -//-//-: –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∫–∞–∂–¥–æ–≥–æ –∫—É–±–∞ –¥–æ–±–∞–≤–∏—Ç—å (–æ—Ç–Ω—è—Ç—å) A
    !r —Öd—É+ -//-//- : —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–∞–Ω–∞)
    !r —Öd—É+(-)B -//-: —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –¥–æ–±–∞–≤–∏—Ç—å (–æ—Ç–Ω—è—Ç—å) B
    """
    error, count, max_dtype, all_flags, simple, calc_sum, rolls_args = manager.get_dice_param(msg.text[len('!r '):])

    if not error:

            if count > 121:
                await msg.answer(r'–£–≤—ã, <@{}>, —Å—Ç–æ–ª—å–∫–æ –¥–∞–π—Å–æ–≤ —É –º–µ–Ω—è –Ω–µ—Ç ¬Ø\_(„ÉÑ)_/¬Ø'.format(msg.author))
                return

            if max_dtype > 1000:
                if max_dtype > C.i10__42:
                    await msg.answer('–ù—É, <@{}>, **—Ç–∞–∫–∏—Ö** –¥–∞–π—Å–æ–≤ –º–Ω–µ –Ω–µ –∑–∞–≤–µ–∑–ª–∏ üòï'.format(msg.author))
                else:
                    await msg.answer('–û–≥–æ, –∫–∞–∫–∏–µ –∫—É–±–∏—â–∞... –º–æ–∂–µ—Ç `!roll` –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, <@{}>? ü§î'.format(msg.author))
                return

            text = ['<@{}>:'.format(msg.author)]
            text += manager.get_dices(rolls_args, short=True, simple=simple, calc_sum=calc_sum)
            if 'h' in all_flags:
                text.append('@here')

            await msg.qanswer(' '.join(text))

    if error:
        await msg.qanswer(other.comfortable_help([str(r.__doc__)]))
        return

    pass


async def rw(msg: _Msg):
    """\
    !rw —Ö: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ d10 –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 6 —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rw —Öd—É: –∫–∏–Ω—É—Ç—å x –∫—É–±–∏–∫–æ–≤-y –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (y/2+1) —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rw —Ö diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ d10 >= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rw —Öd—É diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y >= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rw —Öd—É rel: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y rel(>,<,==, etc) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (y/2+1) —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rw —Öd—É rel diff: -//- –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rw -//- [spvh] : –∫–∏–Ω—É—Ç—å –∫—É–±—ã —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü –∏ —Å –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Å–º. !help rw)
    """
    t = msg.text[len('!rw '):]
    error, count, max_dtype, all_flags, simple, calc_sum, rolls_args = manager.get_dice_param(t, 'f')

    if not error:

            if count > 121:
                await msg.answer(r'–£–≤—ã, <@{}>, —Å—Ç–æ–ª—å–∫–æ –¥–∞–π—Å–æ–≤ —É –º–µ–Ω—è –Ω–µ—Ç ¬Ø\_(„ÉÑ)_/¬Ø'.format(msg.author))
                return

            if max_dtype > 1000:
                if max_dtype > C.i10__42:
                    await msg.answer('–ù—É, <@{}>, **—Ç–∞–∫–∏—Ö** –¥–∞–π—Å–æ–≤ –º–Ω–µ –Ω–µ –∑–∞–≤–µ–∑–ª–∏ üòï'.format(msg.author))
                else:
                    await msg.answer('–û–≥–æ, –∫–∞–∫–∏–µ –∫—É–±–∏—â–∞... –º–æ–∂–µ—Ç `!rollw` –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, <@{}>? ü§î'.format(msg.author))
                return

            text = ['<@{}>:'.format(msg.author)]
            text += manager.get_dices(rolls_args, short=True, simple=simple, calc_sum=calc_sum)
            if 'h' in all_flags:
                text.append('@here')

            await msg.qanswer(' '.join(text))

    if error:
        await msg.qanswer(other.comfortable_help([str(rw.__doc__)]))
        return

    pass


async def rollw(msg: _Msg):
    """\
    !rollw —Ö: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ d10 –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 6 —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rollw —Öd—É: –∫–∏–Ω—É—Ç—å x –∫—É–±–∏–∫–æ–≤-y –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (y/2+1) —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rollw —Ö diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ d10 >= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rollw —Öd—É diff: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y >= (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rollw —Öd—É rel: –∫–∏–Ω—É—Ç—å x –∫—É–±–æ–≤ y rel(>,<,==, etc) –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (y/2+1) —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rollw —Öd—É rel diff: -//- –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü
    !rollw -//- [spvh] : –∫–∏–Ω—É—Ç—å –∫—É–±—ã —Å –≤—ã—á–µ—Ç–æ–º –µ–¥–∏–Ω–∏—Ü –∏ —Å –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Å–º. !help rw)
    """
    t = msg.text[len('!rollw '):]
    error, count, max_dtype, all_flags, simple, calc_sum, rolls_args = manager.get_dice_param(t, 'f')
    if not error:

            if count > 21:
                if count > 121:
                    await msg.answer('<@{}>, —É —Ç–µ–±—è –ø–µ—Ä–µ–±–æ—Ä, —è –≤—ã–∏–≥—Ä–∞–ª üôÇ'.format(msg.author))
                else:
                    await msg.answer('–¢–∞–∫ –º–Ω–æ–≥–æ –∫—É–±–æ–≤... –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç `!rw` –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, <@{}>? ü§î'.format(msg.author))
                return

            if max_dtype > C.i10__42:
                await msg.answer('–ù—É, <@{}>, **—Ç–∞–∫–∏—Ö** –¥–∞–π—Å–æ–≤ –º–Ω–µ –Ω–µ –∑–∞–≤–µ–∑–ª–∏ üòï'.format(msg.author))
                return

            text = [('<@{}>, @here,\n```diff\n' if 'h' in all_flags else '<@{}>,\n```diff\n').format(msg.author)]
            text += manager.get_dices(rolls_args, simple=simple, calc_sum=calc_sum)
            text.append('```')

            await msg.qanswer(''.join(text))

    if error:
        await msg.qanswer(other.comfortable_help([str(rollw.__doc__)]))
        return


async def rollv(msg: _Msg):
    """\
    !rollv —Ö: –ø—Ä–æ—Å—Ç–æ –∫–∏–Ω—É—Ç—å x –¥–∞–π—Å–æ–≤ v5
    !rollv —Ö diff: –∫–∏–Ω—É—Ç—å x –¥–∞–π—Å–æ–≤ v5 –ø—Ä–æ—Ç–∏–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff
    !rollv —Ö diff hunger: –∫–∏–Ω—É—Ç—å x –¥–∞–π—Å–æ–≤ v5 –ø—Ä–æ—Ç–∏–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≥–æ–ª–æ–¥–æ–º hunger
    """
    error, count, diff, hung, par_keys, simple = manager.get_v5_param(msg.text[len('!rollv '):])

    if not error:
            if count > 21:
                if count > 121:
                    await msg.answer('<@{}>, —É —Ç–µ–±—è –ø–µ—Ä–µ–±–æ—Ä, —è –≤—ã–∏–≥—Ä–∞–ª üôÇ'.format(msg.author))
                else:
                    await msg.answer('–¢–∞–∫ –º–Ω–æ–≥–æ –∫—É–±–æ–≤... –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç `!rv` –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, <@{}>? ü§î'.format(msg.author))
                return

            text = [('<@{}>, @here,\n```diff\n' if 'h' in par_keys else '<@{}>,\n```diff\n').format(msg.author)]
            text += manager.get_dices_v5(count, diff, hung, simple)
            text.append('```')

            await msg.qanswer(''.join(text))

    if error:
        await msg.qanswer(other.comfortable_help([str(rollv.__doc__)]))
        return


async def rv(msg: _Msg):
    """\
    !rv —Ö: –ø—Ä–æ—Å—Ç–æ –∫–∏–Ω—É—Ç—å x –¥–∞–π—Å–æ–≤ v5
    !rv —Ö diff: –∫–∏–Ω—É—Ç—å x –¥–∞–π—Å–æ–≤ v5 –ø—Ä–æ—Ç–∏–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff
    !rv —Ö diff hunger: –∫–∏–Ω—É—Ç—å x –¥–∞–π—Å–æ–≤ v5 –ø—Ä–æ—Ç–∏–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≥–æ–ª–æ–¥–æ–º hunger
    !rv —Ö diff hunger h: –∫–∏–Ω—É—Ç—å x –¥–∞–π—Å–æ–≤ v5 –ø—Ä–æ—Ç–∏–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ diff —Å –≥–æ–ª–æ–¥–æ–º hunger –∏ @here;
    """
    error, count, diff, hung, par_keys, simple = manager.get_v5_param(msg.text[len('!rv '):])

    if not error:
            if count > 121:
                await msg.answer('<@{}>, —É —Ç–µ–±—è –ø–µ—Ä–µ–±–æ—Ä, —è –≤—ã–∏–≥—Ä–∞–ª üôÇ'.format(msg.author))
                return

            text = ['<@{}>:'.format(msg.author)]
            text += manager.get_dices_v5(count, diff, hung, simple, short=True)
            if 'h' in par_keys:
                text.append('@here')

            await msg.qanswer(' '.join(text))

    if error:
        await msg.qanswer(other.comfortable_help([str(rv.__doc__)]))
        return

# endregion


# region Primogenat
async def silence(msg: _Msg):
    """\
    !silence N username: –≤–∫–ª—é—á–∏—Ç—å –º–æ–ª—á–∞–Ω–∫—É username –Ω–∞ N —á–∞—Å–æ–≤ \
    """
    s_N = ''
    err = len(msg.args) < 3
    if not err:
        s_N = msg.args[1].replace(',', '.')
        err = not other.is_float(s_N)

    if err:
        await msg.qanswer(other.comfortable_help([str(silence.__doc__)]))
        return

    name = msg.original[len('!silence ') + len(s_N) + 1:]
    t = max(float(s_N), 0.02)

    await C.client.add_reaction(msg.message, emj.e('ok_hand'))
    user = await manager.silence_on(name, t)
    if user:
        text = '–ü–æ —Ä–µ—à–µ–Ω–∏—é –ü—Ä–∏–º–æ–≥–µ–Ω–∞—Ç–∞, <@{0}> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ä–ø–æ—Ä –Ω–∞ {1} —á.'.format(user.id, t)
        await msg.qanswer(text)
        await msg.say(C.main_ch, text)
        ev.timer_hour()
    elif user is False:
        await msg.qanswer(name + " –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫—É—é —Ä–æ–ª—å.")
        return
    elif user is None:
        await msg.qanswer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + name + ".")
        return


async def silence_f(msg: _Msg):
    """\
    !silence_f N username: –≤–∫–ª—é—á–∏—Ç—å –º–æ–ª—á–∞–Ω–∫—É username –Ω–∞ N —á–∞—Å–æ–≤, —Ç–∏—Ö–∞—è –∏ –∏–≥–Ω–æ—Ä–∏—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–æ–ª–∏ \
    """
    s_N = ''
    err = len(msg.args) < 3
    if not err:
        s_N = msg.args[1].replace(',', '.')
        err = not other.is_float(s_N)

    if err:
        await msg.qanswer(other.comfortable_help([str(silence_f.__doc__)]))
        return

    name = msg.original[len('!silence_f ') + len(s_N) + 1:]
    t = max(float(s_N), 0.02)

    await C.client.add_reaction(msg.message, emj.e('ok_hand'))
    user = await manager.silence_on(name, t, force=True)
    if user:
        text = '<@{0}> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ä–ø–æ—Ä –Ω–∞ {1} —á.'.format(user.id, t)
        await msg.qanswer(text)
        ev.timer_hour()
    else:
        await msg.qanswer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + name + ".")
        return


async def unsilence(msg: _Msg):
    """\
    !unsilence username: –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–ª—á–∞–Ω–∫—É –¥–ª—è username\
    """

    err = len(msg.args) < 2
    if err:
        await msg.qanswer(other.comfortable_help([str(unsilence.__doc__)]))
        return

    name = msg.original[len('!unsilence '):]
    await C.client.add_reaction(msg.message, emj.e('ok_hand'))
    user = await manager.silence_off(name)
    if user:
        text = '–ü–æ —Ä–µ—à–µ–Ω–∏—é –ü—Ä–∏–º–æ–≥–µ–Ω–∞—Ç–∞, <@{0}> —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω –∏–∑ —Ç–æ—Ä–ø–æ—Ä–∞.'.format(user.id)
        await msg.say(C.main_ch, text)
        ev.timer_hour()
    elif user is False:
        await msg.qanswer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + name + " –≤ –º–æ–ª—á–∞–Ω–∫–µ.")
    elif user is None:
        await msg.qanswer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + name + ".")
        return


async def unsilence_all(msg: _Msg):
    """\
    !unsilence_all: –≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–ø—Ä–µ—Ç –Ω–∞ —á—Ç–µ–Ω–∏—è –≤—Å–µ–≥–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–∞—Ç–µ–ª–µ–π (–Ω–µ —Ä–æ–ª–µ–π)\
    """
    # await msg.qanswer("–ù–∞—á–∏–Ω–∞–µ–º...")
    await C.client.add_reaction(msg.message, emj.e('ok_hand'))
    for memb in C.prm_server.members:
        await manager.turn_silence(memb, False, force=True)

    await msg.qanswer('–ò–∑ —Ç–æ—Ä–ø–æ—Ä–∞ –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ.')
    ev.timer_hour()


async def kick(msg: _Msg):
    """\
    !kick username: –∫–∏–∫–Ω—É—Ç—å username –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\
    """
    err = len(msg.args) < 2
    if err:
        await msg.qanswer(other.comfortable_help([str(kick.__doc__)]))
        return

    name = msg.original[len('!kick '):]
    user = other.find_member(C.prm_server, name)
    if not user:
        await msg.qanswer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + name + ".")
        return

    if user.top_role >= C.prm_server.me.top_role:
        await msg.qanswer('<@{0}> –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫—É—é —Ä–æ–ª—å.'.format(user.id))
        return

    text = ('<@{0}> –≤—ã–Ω–µ—Å –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∏–∑–≥–Ω–∞–Ω–∏–µ <@{1}>. –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ __–µ—â—ë 3 –≥–æ–ª–æ—Å–∞__ "–∑–∞".'
            '\n–ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É –≤–∞—Å 10 –º–∏–Ω—É—Ç.').format(msg.author, user.id)

    votes = await manager.voting(msg.channel, text=text, timeout=600, votes={msg.author}, count=4)
    if votes:
        text1 = '–ì–æ–ª–æ—Å–∞–º–∏ –æ—Ç <@{0}> —Ä–µ—à–µ–Ω–∏–µ –æ –∫–∏–∫–µ <@{1}> **–ø—Ä–∏–Ω—è—Ç–æ**.'.format('>, <@'.join(votes), user.id)
        await msg.qanswer(text1)
        text2 = '–ü–æ —Ä–µ—à–µ–Ω–∏—é –ü—Ä–∏–º–æ–≥–µ–Ω–∞—Ç–∞, <@{0}> –∏–∑–≥–æ–Ω—è–µ—Ç—Å—è –∏–∑ –¥–æ–º–µ–Ω–∞.'.format(user.id)
        await msg.say(C.main_ch, text2)
        other.later_coro(15, C.client.kick(user))
    else:
        text1 = '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ, —Ä–µ—à–µ–Ω–∏–µ –æ –∫–∏–∫–µ <@{0}> **–Ω–µ –ø—Ä–∏–Ω—è—Ç–æ**.'.format(user.id)
        await msg.qanswer(text1)


# endregion


# region Admin
async def dominate(msg: _Msg):
    """\
    !dominate usr text: –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (‚ú∫_‚ú∫) \
    """
    if len(msg.args) < 2:
        await msg.qanswer(other.comfortable_help([str(dominate.__doc__)]))
        return
    if not msg.admin and msg.author != C.users['Creol']:
        await msg.answer(r'–ù–µ—Ç —É –≤–∞—Å –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ¬Ø\_(„ÉÑ)_/¬Ø')
        return

    auth = other.find_member(C.vtm_server, msg.author)
    who = other.find_member(C.vtm_server, msg.args[1])
    if not auth or not who:
        await msg.qanswer(other.comfortable_help([str(dominate.__doc__)]))
        return
    emb = discord.Embed(title=msg.original[len('!dominate ' + msg.args[1] + ' '):], color=auth.color)
    emb.set_author(name=auth.nick or auth.name, icon_url=auth.avatar_url)
    emb.set_image(url='https://cdn.discordapp.com/attachments/420056219068399617/450428811725766667/dominate.gif')
    #emb.set_footer(text='')
    # ch = other.get_channel(C.channels['sabbat'])
    await msg.type2sent(C.main_ch, text=who.mention, emb=emb)
    #await C.client.send_message(ch, content=who.mention, embed=emb)


async def get_offtime(msg: _Msg):
    """\
    !get_offtime username: —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –¥–æ–ª–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ—Ç
    """
    if len(msg.args) < 2:
        await msg.qanswer(other.comfortable_help([str(get_offtime.__doc__)]))
        return
    name = msg.original[len('!get_offtime '):]
    usr = other.find_member(C.vtm_server, name)
    if not usr:
        await msg.qanswer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return
    await msg.qanswer('{0} –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–∏—Å–∞–ª(–∞) {1} –Ω–∞–∑–∞–¥.'
                      .format(usr.mention, other.sec2str(people.offline(usr.id))))


async def get_offlines(msg: _Msg):
    """\
    !get_offlines d: —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –Ω–µ –ø–∏—à–µ—Ç —É–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ d –¥–Ω–µ–π
    """
    s_ds = msg.original[len('!get_offlines '):].replace(',', '.').replace(' ', '')
    if len(msg.args) < 2 or not other.is_float(s_ds):
        await msg.qanswer(other.comfortable_help([str(get_offlines.__doc__)]))
        return
    r_users = {}
    for role_ in C.vtm_server.role_hierarchy:
        r_users[role_.name] = {}
    ds = float(s_ds)
    check_t = int(ds * 24 * 3600)
    count = 0
    for uid, usr in people.usrs.items():
        t_off = people.offline(usr.id)
        if t_off >= check_t:
            count += 1
            u = other.find_member(C.vtm_server, uid)
            r_users[u.top_role.name][usr.last_m] = ('{0} - –ø–∏—Å–∞–ª(–∞) {1} –Ω–∞–∑–∞–¥.'
                                       .format(u.mention, other.sec2str(t_off)))
    s_num = str(ds if ds != int(ds) else int(ds))
    if count:
        s_users = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏[{0}] –Ω–µ –ø–∏—à—É—â–∏–µ'.format(count) if count > 1 else '–£–Ω–∏–∫—É–º –Ω–µ –ø–∏—à—É—â–∏–π'
        s_days = ['–¥–Ω–µ–π', '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω—è', '–¥–Ω—è']
        end_s_num = int(s_num[-1])
        ans = ['{0} —É–∂–µ {1} {2}:'.format(s_users, s_num, s_days[end_s_num < 5 and end_s_num])]
        r_users['–ë–µ–∑ —Ä–æ–ª–µ–π'] = r_users.pop('@everyone')
        for role_ in r_users:
            if r_users[role_]:
                sorted_users = [r_users[role_][key] for key in sorted(r_users[role_])]
                ans.append('**```{0}[{1}]:```**{2}'.format(role_, len(r_users[role_]), sorted_users[0]))
                ans += sorted_users[1:]
        ans_20 = other.split_list(ans, 20)
        ans = ['\n'.join(v) for v in ans_20]
        await msg.qanswer(ans)
    else:
        await msg.qanswer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–∏—à—É—â–∏—Ö —É–∂–µ {0} –¥–Ω–µ–π –Ω–µ—Ç :slight_smile:.'.format(s_num))


# region Interaction commands
async def channel(msg: _Msg):
    """\
    !channel ch*: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è !mute, !deny, !purge
    !channel: –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ \
    """
    if len(msg.args) > 1:
        #ram.cmd_channels.setdefault(msg.author, set()).update(set(msg.args[1:]))
        # ram.cmd_channels.setdefault(msg.author, set()).update(other.get_channels(msg.args[1:]))
        ram.cmd_channels.setdefault(msg.author, set()).update(other.find_channels_or_users(msg.args[1:]))
        msg.cmd_ch = ram.cmd_channels.get(msg.author, set())

    # await msg.qanswer(('<#' + '>, <#'.join(msg.cmd_ch) + '>') if msg.cmd_ch else 'All')
    text = other.ch_list(msg.cmd_ch)
    await msg.qanswer((', '.join(text)) if text else 'All')


async def unchannel(msg: _Msg):
    """\
    !unchannel ch* : —É–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    !unchannel: –æ—Ç—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ \
    """
    if len(msg.args) < 2:
        ram.cmd_channels[msg.author] = set()
    else:
        ram.cmd_channels.setdefault(msg.author, set()).difference_update(other.get_channels(msg.args[1:]))

    msg.cmd_ch = ram.cmd_channels.get(msg.author, set())
    # await msg.qanswer(('<#' + '>, <#'.join(msg.cmd_ch) + '>') if msg.cmd_ch else 'All')
    text = other.ch_list(msg.cmd_ch)
    await msg.qanswer((', '.join(text)) if text else 'All')


async def report(msg: _Msg):
    """\
    !report ch* : —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–Ω–∞–ª—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (!say !deny !embrace)
    !report: –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ \
    """
    if len(msg.args) > 1:
        ram.rep_channels.setdefault(msg.author, set()).update(other.find_channels_or_users(msg.args[1:]))
        msg.rep_ch = ram.rep_channels.get(msg.author, set())

    text = other.ch_list(msg.rep_ch)
    await msg.qanswer((', '.join(text)) if text else 'None')


async def unreport(msg: _Msg):
    """\
    !unreport ch* : —É–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    !unreport: –æ—Ç—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ \
    """
    if len(msg.args) < 2:
        ram.rep_channels[msg.author] = set()
    else:
        ram.rep_channels.setdefault(msg.author, set()).difference_update(other.find_channels_or_users(msg.args[1:]))

    msg.rep_ch = ram.rep_channels.get(msg.author, set())
    text = other.ch_list(msg.rep_ch)
    await msg.qanswer((', '.join(text)) if text else 'None')


async def say(msg: _Msg):
    """\
    !say text: —Å–∫–∞–∑–∞—Ç—å –ë–µ–∫–∫–µ—Ç–æ–º text –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ !report \
    """
    await msg.report(msg.original[len('!say '):])


async def sayf(msg: _Msg):
    """\
    !sayf text: —Å–∫–∞–∑–∞—Ç—å –ë–µ–∫–∫–µ—Ç–æ–º text –≤–æ #flood \
    """
    await msg.say(C.main_ch, msg.original[len('!sayf '):])


async def say_wait(msg: _Msg):
    """\
    !say_wait username msg: –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç username
    !say_wait role msg: –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–≥–æ-—Ç–æ —Å role
    !say_wait d msg: –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ d –º–∏–Ω—É—Ç –≤ report
    """
    if len(msg.args) < 3:
        await msg.qanswer(other.comfortable_help([str(say_wait.__doc__)]))
        return

    # user = msg.


async def emoji(msg: _Msg):
    """\
    !emoji: –≤–∫–ª/–≤—ã–∫–ª —ç–º–æ–¥–∂–∏ –ë–µ–∫–∫–µ—Ç–∞ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \
    """
    if msg.author in ram.emoji_users:
        ram.emoji_users.discard(msg.author)
        await msg.qanswer('Emoji mode off')
    else:
        ram.emoji_users.add(msg.author)
        await msg.qanswer('Emoji mode on')


async def purge(msg: _Msg):
    """\
    !purge: —Å—Ç–µ—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ !channels
    !purge N: —Å—Ç–µ—Ä–µ—Ç—å N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–º –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ !channel
    !purge N usr*: —Å—Ç–µ—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–æ–æ–±—â–µ–Ω–∏–π –≤ !channel \
    """
    channels = msg.cmd_ch or {msg.channel.id}
    count = msg.args[1] if len(msg.args) > 1 else 1
    check = None

    if len(msg.args) > 2:
        check_set = other.find_users(msg.args[2:])   #set(msg.args[2:])

        def check_user(m):
            return m.author.id in check_set

        check = check_user
    chs = await other.get_channels_or_users(channels)
    for ch in chs:
        await msg.purge(ch, count, check=check)


async def purge_aft(msg: _Msg):
    """\
    !purge_aft ch msg: —Å—Ç–µ—Ä–µ—Ç—å –º–∏–ª–ª–∏–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ msg –≤ ch
    !purge_aft ch msg N: —Å—Ç–µ—Ä–µ—Ç—å N —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ msg –≤ ch
    !purge_aft ch msg N usr*: —Å—Ç–µ—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤ –∏–∑ N —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ msg –≤ ch \
    """
    err = len(msg.args) < 3

    ch = {}
    if not err:
        ch = other.get_channel(msg.args[1]) #C.client.get_channel(msg.args[1])
        err = not ch

    mess = {}
    if not err:
        mess = await C.client.get_message(ch, msg.args[2])
        err = not mess

    if err:
        await msg.qanswer(other.comfortable_help([str(purge_aft.__doc__)]))
        return

    count = msg.args[3] if len(msg.args) > 3 else 1000000
    check = None

    if len(msg.args) > 4:
        check_set = other.find_members(mess.server, msg.args[4:])

        def check_user(m):
            return m.author.id in check_set

        check = check_user

    await msg.purge(ch, count, check=check, aft=mess)


async def purge_ere(msg: _Msg):
    """\
    !purge_ere ch msg: —Å—Ç–µ—Ä–µ—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ msg –≤ ch
    !purge_ere ch msg N: —Å—Ç–µ—Ä–µ—Ç—å N —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ msg –≤ ch
    !purge_ere ch msg N usr*: —Å—Ç–µ—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤ –∏–∑ N —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ msg –≤ ch \
    """
    err = len(msg.args) < 3

    ch = {}
    if not err:
        ch = other.get_channel(msg.args[1])
        err = not ch

    mess = {}
    if not err:
        mess = await C.client.get_message(ch, msg.args[2])
        err = not mess

    if err:
        await msg.qanswer(other.comfortable_help([str(purge_ere.__doc__)]))
        return

    count = msg.args[3] if len(msg.args) > 3 else 1
    check = None

    if len(msg.args) > 4:
        check_set = other.find_members(mess.server, msg.args[4:])

        def check_user(m):
            return m.author.id in check_set

        check = check_user

    await msg.purge(ch, count, check=check, bef=mess)


async def purge_bet(msg: _Msg):
    """\
    !purge_bet ch msg1 msg2: —Å—Ç–µ—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É msg1 –∏ msg2 –≤ ch
    !purge_bet ch msg1 msg2 usr*: —Å—Ç–µ—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤ –º–µ–∂–¥—É msg1 –∏ msg2 –≤ ch \
    """
    err = len(msg.args) < 4

    ch = {}
    if not err:
        ch = other.get_channel(msg.args[1]) # C.client.get_channel(msg.args[1])
        err = not ch

    msg1 = {}
    if not err:
        msg1 = await C.client.get_message(ch, msg.args[2])
        err = not msg1

    msg2 = {}
    if not err:
        msg2 = await C.client.get_message(ch, msg.args[3])
        err = not msg2

    if err:
        await msg.qanswer(other.comfortable_help([str(purge_bet.__doc__)]))
        return

    check = None

    if len(msg.args) > 4:
        check_set = other.find_members(msg1.server, msg.args[4:])

        def check_user(m):
            return m.author.id in check_set

        check = check_user

    await msg.purge(ch, 1000000, check=check, aft=msg1, bef=msg2)


async def embrace(msg: _Msg):
    """\
    !embrace username: —Å–ª—É—á–∞–π–Ω–æ (–µ—Å–ª–∏ –Ω–µ—Ç –∫–ª–∞–Ω–∞) –æ–±—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–¥–∞—Ç—å —Å–∏—Ä–∞, —Å–æ–æ–±—â–∏—Ç—å –≤ !reports
    !embrace role username: –æ–±—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ role, –≤—ã–¥–∞—Ç—å —Å–∏—Ä–∞, —Å–æ–æ–±—â–∏—Ç—å –≤ !report
    """
    if len(msg.args) < 2:
        # get help
        return

    clan = None
    if len(msg.args) < 3:
        name = msg.original[len('!embrace '):]
    else:
        role = other.find(C.vtm_server.roles, id=msg.args[1])
        ln = 0
        if not role:
            for role_ in C.vtm_server.roles:
                if role_.name in msg.original:
                    if not role or len(role_.name) > len(role.name):
                        role = role_
            if role:
                ln = len('!embrace ') + len(role.name) + 1
        else:
            ln = msg.original.find(' ', len('!embrace ') + 1) + 1
        if role:
            clan = C.role_by_id.get(role.id, None)
            if clan in C.clan_names:
                name = msg.original[ln:]
            else:
                await msg.qanswer("It's not clan role")
                return
        else:
            name = msg.original[len('!embrace '):]
    user = other.find_member(C.vtm_server, name)
    text = await manager.do_embrace(user, clan)
    if text:
        await msg.report(text)
    else:
        await msg.qanswer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# endregion

# region Deny commands


async def deny(msg: _Msg):
    """\
    !deny: —Å–ø–∏—Å–æ–∫ –∑–∞–º—å—é—Ç–µ–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
    !deny usr* : –∑–∞–º—å—é—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ !channel \
    """
    # without args - show deny list
    if len(msg.args) < 2:
        if not ram.torpor_users:
            await msg.qanswer('**–°–≤–æ–±–æ–¥–∞ —Ü–∞—Ä–∏—Ç –≤ –º–µ—Å—Ç–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö.**')
        else:
            await msg.qanswer('\n'.join(
                '<@' + user + '>:\t<#' + '>, <#'.join(ram.torpor_users[user]) + '>' for user in ram.torpor_users))

    # else - deny by id (from args) in channels (from mem.cmd_channels)
    nope = {C.users['Natali'], C.users['bot'], msg.author}
    ch = msg.cmd_ch or {'All'}
    users = other.find_users(msg.args[1:]).difference(nope)
    members = other.get_mentions(users)
    for usr in users:
        ram.torpor_users.setdefault(usr, set()).update(ch)
    # for user in msg.args[1:]:
    #     if user not in nope:
    #         ram.torpor_users.setdefault(user, set()).update(ch)
    #         members.append('<@' + user + '>')

    if not members:
        return

    if ch == {'All'}:
        mess = ('**–°–æ—Ä–æ–¥–∏—á {0} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–æ—Ä–ø–æ—Ä. –û—Ç–Ω—ã–Ω–µ –æ–Ω –Ω–µ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ—Ç –Ω–∏ —Å–ª–æ–≤–∞.**' if len(
            members) < 2 else '**–°–æ—Ä–æ–¥–∏—á–∏ {0} –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–æ—Ä–ø–æ—Ä. –û—Ç–Ω—ã–Ω–µ –æ–Ω–∏ –Ω–µ –ø—Ä–æ–∏–∑–Ω–µ—Å—É—Ç –Ω–∏ —Å–ª–æ–≤–∞.**')
        await msg.report(mess.format(', '.join(members)))
    else:
        s_domains = '–¥–æ–º–µ–Ω–∞ <#%s>' % ch.copy().pop() if len(ch) < 2 else '–¥–æ–º–µ–Ω–æ–≤ <#%s>' % ('>, <#'.join(ch))
        mess = ('**–°–æ—Ä–æ–¥–∏—á {0} –±—ã–ª –∏–∑–≥–Ω–∞–Ω –∏–∑ {1}. –û—Ç–Ω—ã–Ω–µ —Ç–∞–º –º—ã –µ–≥–æ –Ω–µ —É—Å–ª—ã—à–∏–º.**' if len(
            members) < 2 else '**–°–æ—Ä–æ–¥–∏—á–∏ {0} –±—ã–ª –∏–∑–≥–Ω–∞–Ω—ã –∏–∑ {1}. –û—Ç–Ω—ã–Ω–µ —Ç–∞–º –º—ã –∏—Ö –Ω–µ —É—Å–ª—ã—à–∏–º.**')
        await msg.report(mess.format(', '.join(members), s_domains))


async def undeny(msg: _Msg):
    """\
    !undeny: —Ä–∞–∑–º—å—é—Ç–∏—Ç—å –≤—Å–µ—Ö
    !undeny usr* : —Ä–∞–∑–º—å—é—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ !channel \
    """
    # without args - undeny all in everywhere
    if len(msg.args) < 2 and ram.torpor_users:
        ram.torpor_users = {}
        await msg.report('**```–ê–ú–ù–ò–°–¢–ò–Æ –î–õ–Ø –í–°–ï–•, –î–ê–†–û–ú, –ò –ü–£–°–¢–¨ –ù–ò–ö–¢–û –ù–ï –£–ô–î–Å–¢ –û–ë–ò–ñ–ï–ù–ù–´–ô!```**')
        return

    # else - undeny by id (from args) in channels (from mem.cmd_channels)
    ch = msg.cmd_ch or {'All'}
    users = other.find_users(msg.args[1:]).intersection(ram.torpor_users.keys())
    if ch == {'All'}:
        members = other.get_mentions(users)
        ram.torpor_users = {usr: ram.torpor_users[usr] for usr in ram.torpor_users if usr not in users}
    else:
        members = []
        for user in users:
            if ram.torpor_users[user].intersection(ch):
                ram.torpor_users[user].difference_update(ch)
                members.append('<@' + user + '>')
                if not ram.torpor_users[user]:
                    del ram.torpor_users[user]

    # members = []    # other.get_mentions(users)
    # for user in users:
    #     if user in ram.torpor_users:
    #         if ch == {'All'}:
    #             del ram.torpor_users[user]
    #             members.append('<@' + user + '>')
    #         elif ram.torpor_users[user].intersection(ch):
    #             ram.torpor_users[user].difference_update(ch)
    #             members.append('<@' + user + '>')
    #             if not ram.torpor_users[user]:
    #                 del ram.torpor_users[user]

    if not members:
        return

    if ch == {'All'}:
        mess = ('**–°–æ—Ä–æ–¥–∏—á {0} –±—ã–ª –ø—Ä–æ–±—É–∂–¥—ë–Ω –∏ –µ–º—É –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å.**' if len(
            members) < 2 else '**–°–æ—Ä–æ–¥–∏—á–∏ {0} –±—ã–ª–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω—ã –∏ –∏–º –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å.**')
        await msg.report(mess.format(', '.join(members)))
    else:
        s_domains = '–¥–æ–º–µ–Ω–µ <#%s>' % ch.copy().pop() if len(ch) < 2 else '–¥–æ–º–µ–Ω–∞—Ö <#%s>' % ('>, <#'.join(ch))
        mess = ('**–°–æ—Ä–æ–¥–∏—á—É {0} –¥–∞—Ä–æ–≤–∞–Ω–æ –ø–æ–º–∏–ª–æ–≤–∞–Ω–∏–µ –≤ {1} –∏ –æ–Ω –º–æ–∂–µ—Ç —Ç–∞–º –æ–±—â–∞—Ç—å—Å—è.**' if len(
            members) < 2 else '**–°–æ—Ä–æ–¥–∏—á–∞–º {0} –¥–∞—Ä–æ–≤–∞–Ω–æ –ø–æ–º–∏–ª–æ–≤–∞–Ω–∏–µ –≤ {1} –∏ –æ–Ω–∏ –º–æ–≥—É—Ç —Ç–∞–º –æ–±—â–∞—Ç—å—Å—è.**')
        await msg.report(mess.format(', '.join(members), s_domains))

# endregion

# region Mute commands
# TODO Becketts comments to *mute commands


async def mute(msg: _Msg):
    """\
    !mute: —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ "–≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ" –ë–µ–∫–∫–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞
    !mute all: –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö
    !mute ch*. : –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö \
    """
    if len(msg.args) > 1:
        if 'all' in msg.args:
            ram.mute_channels.add('all')
        ram.mute_channels.update(other.get_channels(msg.args[1:]))

    await mute_list(msg)


async def unmute(msg: _Msg):
    """\
    !unmute all: –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    !unmute: –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –≤–æ–æ–±—â–µ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö
    !unmute ch* : –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö \
    """
    if len(msg.args) < 2:
        ram.mute_channels = set()
    else:
        if 'all' in msg.args:
            ram.mute_channels.difference_update({'all'})
        ram.mute_channels.difference_update(other.get_channels(msg.args[1:]))

    await mute_list(msg)


async def mute_list(msg: _Msg):
    """\
    !mute_list: —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ "–≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ" –ë–µ–∫–∫–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ \
    """
    await msg.qanswer(('<#' + '>, <#'.join(ram.mute_channels) + '>') if ram.mute_channels else 'None')


async def mute_l(msg: _Msg):
    """\
    !mute_l: —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ "–≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ" –ë–µ–∫–∫–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    !mute_l all: –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö
    !mute_l ch*. : –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö \
    """
    if len(msg.args) > 1:
        if 'all' in msg.args:
            ram.mute_light_channels.add('all')
        ram.mute_light_channels.update(other.get_channels(msg.args[1:]))

    await mute_l_list(msg)


async def unmute_l(msg: _Msg):
    """\
    !unmute_l all: –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    !unmute_l: –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–æ–±—â–µ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö
    !unmute_l ch* : –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –ë–µ–∫–∫–µ—Ç–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö \
    """
    if len(msg.args) < 2:
        ram.mute_light_channels = set()
    else:
        if 'all' in msg.args:
            ram.mute_light_channels.difference_update({'all'})
        ram.mute_light_channels.difference_update(other.get_channels(msg.args[1:]))

    await mute_l_list(msg)


async def mute_l_list(msg: _Msg):
    """\
    !mute_light_list: —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ "–≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ" –ë–µ–∫–∫–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è \
    """
    await msg.qanswer(('<#' + '>, <#'.join(ram.mute_light_channels) + '>') if ram.mute_light_channels else 'None')
# endregion
# endregion

# region Super


async def kick_f(msg: _Msg):
    if len(msg.args) < 2:
        return

    name = msg.original[len('!kick_f '):]
    usr = msg.find_member(name)
    if not usr:
        await msg.qanswer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    else:
        if other.issuper(usr):
            await msg.qanswer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å.')
        else:
            await C.client.kick(usr)


async def ban(msg: _Msg):
    if len(msg.args) < 2:
        return

    name = msg.original[len('!ban '):]
    usr = msg.find_member(name)
    if not usr:
        await msg.qanswer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    else:
        if other.issuper(usr):
            await msg.qanswer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å.')
        else:
            await C.client.ban(usr, delete_message_days=0)


async def unban(msg: _Msg):
    if len(msg.args) < 2:
        return

    usr = await other.get_ban_user(msg.cmd_server, msg.original[len('!unban '):])
    if not usr:
        await msg.qanswer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    else:
        await C.client.unban(msg.cmd_server, usr)


async def pin(msg: _Msg):
    err = len(msg.args) < 3
    ch = None
    if not err:
        ch = other.get_channel(msg.args[1]) #C.client.get_channel(msg.args[1])
        err = not ch

    if err:
        #await msg.qanswer(other.comfortable_help([str(pin.__doc__)]))
        return

    for mess_id in msg.args[2:]:
        try:
            mess = await C.client.get_message(ch, mess_id)
            await C.client.pin_message(mess)
        except discord.Forbidden:
            log.jW("Bot haven't permissions here.")
        except discord.NotFound:
            log.jW("Bot can't find message.")


async def unpin(msg: _Msg):
    err = len(msg.args) < 3
    ch = None
    if not err:
        ch = other.get_channel(msg.args[1]) #C.client.get_channel(msg.args[1])
        err = not ch

    if err:
        #await msg.qanswer(other.comfortable_help([str(pin.__doc__)]))
        return

    for mess_id in msg.args[2:]:
        try:
            mess = await C.client.get_message(ch, mess_id)
            await C.client.unpin_message(mess)
        except discord.Forbidden:
            log.jW("Bot haven't permissions here.")
        except discord.NotFound:
            log.jW("Bot can't find message.")


async def delete(msg: _Msg):
    """
    !delete ch msg*: —Å—Ç–µ—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
    """

    #await msg.answer(other.comfortable_help([str(purge_after.__doc__)]))
    # await msg.answer("```css\n" + str(delete.__doc__) + "```")
    #return
    err = len(msg.args) < 3
    ch = None
    if not err:
        ch = other.get_channel(msg.args[1]) #C.client.get_channel(msg.args[1])
        err = not ch

    if err:
        await msg.qanswer(other.comfortable_help([str(delete.__doc__)]))
        return

    done = False
    for mess_id in msg.args[2:]:
        try:
            mess = await C.client.get_message(ch, mess_id)
            await C.client.delete_message(mess)
            done = True
        except discord.Forbidden:
            log.jW("Bot haven't permissions here.")
        except discord.NotFound:
            log.jW("Bot can't find message.")

    if done:
        await msg.qanswer(":ok_hand:")


# Delete msgs from private channel:
    # m = await C.client.send_message(other.get_user(C.users['Kuro']), content='–¢–µ—Å—Ç')
    # ch = m.channel
    # async for message in C.client.logs_from(ch, limit=10):
    #     print(message.id, str(message.author), message.content)
    #     if message.author.id == C.users['bot']:
    #         await C.client.delete_message(message)

async def nickname(msg: _Msg):
    if len(msg.args) > 1:
        name = msg.original[len('!nickname '):]
    else:
        name = 'Beckett'
    await C.client.change_nickname(msg.cmd_server.me, name)  # Beckett


async def test(msg: _Msg):
    ram.game = not ram.game
    await other.test_status(ram.game)


async def play(msg: _Msg):
    game = None
    if len(msg.args) > 1:
        ram.game = msg.original[len('!play '):]
        game = discord.Game(name=ram.game)
    else:
        ram.game = False
    # status = (discord.Status.dnd if ram.game else discord.Status.online)
    await C.client.change_presence(game=game, status=discord.Status.online, afk=False)


async def info(msg: _Msg):
    ans = []
    for s in C.client.servers:  # type: discord.Server
        ans.append(s.name + ' {' + s.id + '}')
        ans.append('\tOwner: ' + str(s.owner) + ' (' + s.owner.mention + ')')
        ans.append('\tCount: ' + str(s.member_count))
        ans.append('\tRoles: ')
        for role_ in s.role_hierarchy:
            ans.append('\t\t' + role_.name + ' {' + role_.mention + '}')
        v = {}
        t = {}
        for ch in s.channels: # type: discord.Channel
            if str(ch.type) == 'text':
                t[ch.position] = '\t\t' + ch.name + ' {' + ch.id + '}'
            elif str(ch.type) == 'voice':
                v[ch.position] = '\t\t' + ch.name + ' {' + ch.id + '}'
            # if ch.type == 4:
            #     continue  # group
        ans.append('\tChannels: ')
        ans += [t[k] for k in sorted(t)]
        ans.append('\tVoices: ')
        ans += [v[k] for k in sorted(v)]
        ans.append('\tMembers: ')
        for m in s.members: # type: discord.Member
            usr_name = str(m) + ('(' + m.display_name + ')' if m.name != m.display_name else '')
            ans.append('\t\t' + usr_name + ' {' + m.mention + '}')
    f_name = 'info[{0}].txt'.format(other.t2utc().strftime('%d|%m|%y %T'))
    with open(f_name, "w") as file:
        print(*ans, file=file, sep="\n")

    log.I('Sending info...')
    log.dropbox_send(f_name, f_name, '/Info/')
    log.I('Sending info done.')
    await msg.qanswer(":ok_hand:")


async def add_role(msg: _Msg):
    if len(msg.args) < 3:
        await msg.qanswer("!add_role user role1 role2 ...")
        return

    usr = msg.find_member(msg.args[1])
    if not usr:
        await msg.qanswer("Can't find user " + msg.args[1])
        return

    new_roles = []
    not_roles = []
    for i in range(2, len(msg.args)):
        role = other.find(msg.cmd_server.roles, id=msg.args[i])
        if not role:
            role = other.find(msg.cmd_server.roles, name=msg.args[i])
        if not role:
            not_roles.append(msg.args[i])
        else:
            new_roles.append(role)

    if not_roles:
        await msg.qanswer("Can't find roles: " + ', '.join(not_roles))
    if not new_roles:
        await msg.qanswer("Can't find any roles!")
        return

    await C.client.add_roles(usr, *new_roles)
    await msg.qanswer(":ok_hand:")


async def rem_role(msg: _Msg):
    if len(msg.args) < 3:
        await msg.qanswer("!rem_role user role1 role2 ...")
        return

    usr = msg.find_member(msg.args[1])
    if not usr:
        await msg.qanswer("Can't find user " + msg.args[1])
        return

    old_roles = []
    not_roles = []
    for i in range(2, len(msg.args)):
        role = other.find(msg.cmd_server.roles, id=msg.args[i])
        if not role:
            role = other.find(msg.cmd_server.roles, name=msg.args[i])
        if not role:
            not_roles.append(msg.args[i])
        else:
            old_roles.append(role)

    if not_roles:
        await msg.qanswer("Can't find roles: " + ', '.join(not_roles))
    if not old_roles:
        await msg.qanswer("Can't find any roles!")
        return

    await C.client.remove_roles(usr, *old_roles)
    await msg.qanswer(":ok_hand:")


async def clear_clans(msg: _Msg):
    if len(msg.args) < 2:
        # get help
        return

    user = other.find_member(C.vtm_server, msg.original[len('!clear_clans '):])
    if user:
        #C.clan_names
        rls = []
        for clan in C.clan_names:   #TODO check for existing role on server
            rls.append(other.find(C.vtm_server.roles, id=C.roles[clan]))
        rls.append(other.find(C.vtm_server.roles, id=C.roles['Sabbat']))
        await C.client.remove_roles(user, *rls)

    else:
        await msg.qanswer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def read(msg: _Msg):
    """
    !read ch N: –ø—Ä–æ—á–∏—Ç–∞—Ç—å N —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ch
    """
    if len(msg.args) < 3:
        await msg.qanswer(other.comfortable_help([str(read.__doc__)]))
        return

    if msg.args[2].isnumeric():
        num = int(msg.args[2])
    else:
        await msg.qanswer(other.comfortable_help([str(read.__doc__)]))
        return

    if msg.args[1] == 'log':
        log.D('* <read> read from log_file')
        mess = log.read_log(num)
        await msg.qanswer('`' + '`\n`'.join(mess) + '`')
        await msg.qanswer(":ok_hand:")
        return

    ch = await other.get_channel_or_user(msg.args[1])  # type: discord.Channel
    if not ch:
        await msg.qanswer("Can't find channel " + msg.args[1])
        return

    if not ch.is_private:
        pr = ch.permissions_for(ch.server.me)  # type: discord.Permissions
        if not pr.read_message_history:
            await msg.qanswer("No permissions for reading <#{0}>!".format(ch.id))
            return

    log.D('- <read> for {0}({1}) start'.format(ch, ch.id))
    messages = []
    count = 0
    async for message in C.client.logs_from(ch, limit=num):
        messages.append(message)
        count += 1
        if count % 10000 == 0:
            log.D('- - <read> save messages: ', count)
    log.D('- <read> end save with {0} messages'.format(count))
    messages.reverse()
    log.D('- <read> start format messages')
    mess = ['Read from {0} ({1}) at [{2}] with {3} messages:\n'
                .format(ch, ch.id, other.t2utc().strftime('%d|%m|%y %T'), count)]
    base = {}
    for i, message in enumerate(messages):
        mess.append(await log.format_mess(message, date=True, dbase=base))
        mess += (await log.mess_plus(message, save_all_links=False))
        if (i+1) % 10000 == 0:
            log.D('- - <read> format messages: ', i+1)
    log.D('- <read> end format messages')
    await msg.qanswer('\n'.join(mess))
    await msg.qanswer(":ok_hand:")


async def log_channel(msg: _Msg):
    if len(msg.args) < 2:
        await msg.qanswer("!log_channel channel")
        return

    ch = other.get_channel(msg.args[1]) # type: discord.Channel
    if not ch:
        await msg.qanswer("Can't find channel " + msg.args[1])
        return

    pr = ch.permissions_for(ch.server.me) # type: discord.Permissions
    if not pr.read_message_history:
        await msg.qanswer("No permissions for reading <#{0}>!".format(ch.id))
        return

    save_links = len(msg.args) > 2
    ans = await msg.question(('–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ <#{0}> [{0}] (' +
        ('**—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º** –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' if save_links else '**–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è** –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π') + '). '
                             '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —Ç–∞–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. '
                             '–í—ã *—É–≤–µ—Ä–µ–Ω—ã*, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?').format(ch.id))
    if ans:
        await msg.qanswer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º...")
    else:
        await msg.qanswer("–û—Ç–º–µ–Ω–∞ log_channel.")
        return

    log.D('- log_channel for #{0}({1}) start'.format(ch.name, ch.id))
    count = 0
    messages = []
    async for message in C.client.logs_from(ch, limit=1000000):
        messages.append(message)
        count += 1
        if count % 10000 == 0:
            log.D('- - <log_channel> save messages: ', count)
    log.D('- log_channel end save with {0} messages'.format(count))
    messages.reverse()

    log.D('- log_channel start format messages')
    mess = ['Log from {0} ({1}) at [{2}] with {3} messages:\n'
                .format(ch.name, ch.id, other.t2utc().strftime('%d|%m|%y %T'), count)]

    channel_links = other.get_channel(C.channels['vtm_links_info_logs'])
    if save_links:
        link_messages = []
        log.D('- log_channel start scan vtm_links_info_logs')
        async for message in C.client.logs_from(channel_links, limit=1000000):
            link_messages.append(message)
        log.D('- log_channel end scan')
        log.D('- log_channel start update links')
        for message in link_messages:
            await log.mess_plus(message, save_all_links=True, update_links=True)
        log.D('- log_channel end update links')
    base = {}
    for i, message in enumerate(messages):
        mess.append(await log.format_mess(message, date=True, dbase=base))
        mess += (await log.mess_plus(message, save_all_links=save_links, other_channel=channel_links))
        if (i+1) % 10000 == 0:
            log.D('- - <log_channel> format messages: ', i+1)
    log.D('- log_channel end format messages')
    # log.jD('base count: ', len(base))
    f_name = 'log_channel({0})[{1}].txt'.format(ch.name, other.t2utc().strftime('%d|%m|%y %T'))
    with open(f_name, "w") as file:
        print(*mess, file=file, sep="\n")

    log.I('Sending log...')
    log.dropbox_send(f_name, f_name, '/Info/')
    log.I('Sending log done.')
    await msg.qanswer(":ok_hand:")


async def server(msg: _Msg):
    ans = ['All servers:']
    for s in C.client.servers:  # type: discord.Server
        ans.append('\t{0.name} [{0.id}] ({0.owner} [{0.owner.id}])'.format(s))

    serv = None
    if len(msg.args) > 1:
        i = msg.original[len('!server '):]
        for s in C.client.servers:
            if s.name == i or s.id == i:
                serv = s
                break
        if serv:
            ram.cmd_server[msg.author] = serv.id
            ans.append('\nYou choose {0.name} now.'.format(serv))
        elif msg.author in ram.cmd_server:
            ram.cmd_server.pop(msg.author)
            ans.append('\nNo command server.')
    else:
        serv = msg.author in ram.cmd_server and C.client.get_server(ram.cmd_server[msg.author])
        if serv:
            ans.append('\nNow command server is {0.name}'.format(serv))
        else:
            ans.append('\nNo command server.')

    await msg.qanswer('\n'.join(ans))


async def info_channels(msg: _Msg):
    ans = []
    servs = (msg.author in ram.cmd_server and [C.client.get_server(ram.cmd_server[msg.author])]) or C.client.servers
    for s in servs:  # type: discord.Server
        ans.append('{0.name} [{0.id}] ({0.owner} [{0.owner.id}]):'.format(s))
        v = {}
        t = {}
        for ch in s.channels:  # type: discord.Channel
            if str(ch.type) == 'text':
                t[ch.position] = ch.name + ' {' + ch.id + '}'
            elif str(ch.type) == 'voice':
                v[ch.position] = ch.name + ' {' + ch.id + '}'
            # if ch.type == 4:
            #     continue  # group
        ans.append('\tChannels: ' + ', '.join([t[k] for k in sorted(t)]))
        ans.append('\tVoices: ' + ', '.join([v[k] for k in sorted(v)]))

    res = '\n'.join(ans)
    try:
        await msg.qanswer(res)
    except Exception as e:
        other.pr_error(e, 'info_channels', 'error')
        print(res)
        await msg.qanswer('Check log.')


async def go_timer(msg: _Msg):
    log.D('Start timer by command.')
    ev.timer_hour()
    if C.is_test:
        await msg.qanswer('Done, look the log.')
    else:
        await msg.qanswer(":ok_hand:")


# region People
async def people_clear(msg: _Msg):
    ans = await msg.question('–í–´ –°–û–ë–ò–†–ê–ï–¢–ï–°–¨ –°–¢–ï–†–ï–¢–¨ –í–°–ï –¢–ê–ë–õ–ò–¶–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô. –≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–í–û–ó–ú–û–ñ–ù–û –û–¢–ú–ï–ù–ò–¢–¨.'
                             '–í–´ –¢–û–ß–ù–û –ñ–ï–õ–ê–ï–¢–ï –ü–†–û–î–û–õ–ñ–ò–¢–¨?')
    if ans:
        people.clear()
        await msg.qanswer(":ok_hand:")
    else:
        await msg.qanswer("–û—Ç–º–µ–Ω–∞ people_clear.")


async def people_sync(msg: _Msg):
    ans = await msg.question('–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. '
                             '–í—ã **—Ç–æ—á–Ω–æ** —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ *–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–µ–ª–∞–µ—Ç–µ* –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')
    if ans:
        await msg.qanswer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º, –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è...")
        await people.sync()
        await msg.qanswer(":ok_hand:")
    else:
        await msg.qanswer("–û—Ç–º–µ–Ω–∞ people_sync.")


async def people_time_sync(msg: _Msg):
    ans = await msg.question('–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. '
                             '–í—ã **—Ç–æ—á–Ω–æ** —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ *–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–µ–ª–∞–µ—Ç–µ* –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')
    if ans:
        await msg.qanswer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º, –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è...")
        await people.time_sync()
        await msg.qanswer(":ok_hand:")
    else:
        await msg.qanswer("–û—Ç–º–µ–Ω–∞ people_time_sync.")


async def full_update(msg: _Msg):
    log.D('Start full update of people by command.')
    for usr in people.usrs.values():
        if {'add', 'upd', 'del'}.difference(usr.status):
            usr.status = 'upd'

    for gn in people.gone.values():
        if {'add', 'upd', 'del'}.difference(gn.status):
            gn.status = 'upd'

    await go_timer(msg)
# endregion


# region Voice
async def connect(msg: _Msg):
    """
    !connect ch: –ø–æ–¥—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –≤–æ–π—Å—É
    """
    if len(msg.args) > 1:
        ch = other.get_channel(' '.join(msg.args[1:]))
        if ch:
            if ch.type == discord.ChannelType.voice:
                if C.voice and C.voice.is_connected():
                    await C.voice.move_to(ch)
                else:
                    try:
                        C.voice = await C.client.join_voice_channel(ch)
                    except Exception as e:
                        other.pr_error(e, 'connect')
                        C.voice = C.client.voice_client_in(msg.cmd_server)
            else:
                await msg.qanswer("–ö–∞–Ω–∞–ª - –Ω–µ –≤–æ–π—Å")
        else:
            await msg.qanswer("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª")
    else:
        await msg.qanswer(other.comfortable_help([str(connect.__doc__)]))


async def disconnect(msg: _Msg):
    """
    !disconnect: –æ—Ç–ª—é—á–∏—Ç—Å—è –æ—Ç –≤–æ–π—Å–∞
    """
    if C.voice and C.voice.is_connected():
        await C.voice.disconnect()


async def haha1(msg: _Msg):
    if C.voice and C.voice.is_connected():
        C.player = C.voice.create_ffmpeg_player('sound/laugh0.mp3')
        C.player.start()


async def haha2(msg: _Msg):
    if C.voice and C.voice.is_connected():
        C.player = C.voice.create_ffmpeg_player('sound/sabbatlaugh1.mp3')
        C.player.start()
# endregion


# region Test
keys = []
msgs = {}


async def tst(msg: _Msg):
    # t = com.get_resp('test')
    # if t:
    #     await msg.qanswer(t['text'])
    t = ('–ò –ø–æ–º–Ω–∏: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–º - —ç—Ç–æ –ø—É—Ç—å, –ø—Ä–µ–≥—Ä–∞–∂–¥–∞–µ–º—ã–π –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –∏–Ω–æ–≥–¥–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π '
            '—Ç–æ–ª–ø–æ–π, –Ω–æ, –ø—Ä–∏ –≤—Å–µ–π –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ —Å—Ç–æ—è—â–∏–π.',
         '–†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –Ω–æ –º–Ω–µ –µ—â–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—Ö–∏.',)
    # t *= 20
    p = 10

    def call(msgs):
        for m in msgs: #type: discord.Message
            print('call:', m.channel, m.content)

    async def a_call(msgs):
        for m in msgs: #type: discord.Message
            await C.client.pin_message(m)

    print(com.msg_queue)
    print(com.msg_args)
    print('---')
    keys.append(com.write_msg(msg.channel, t, extra=p, save_obj=msgs, fun=call))
    print(com.msg_queue)
    print(com.msg_args)
    com.write_msg(msg.channel, '–•–∞-—Ö–∞-—Ö–∞!', extra=p, save_obj=msgs, fun=call)
    print(com.msg_queue)
    print(com.msg_args)
    # await C.client.add_reaction(msg.message, emj.extra_em[emj.e('a_Tremere_colors2')])
    # await msg.qanswer('<:p_tetjaadmin:448231060275462144> <a:Tremere_red1:525333494683926528>')

    # text = '\n'.join([str(i*10) + ') ' + (('1234 ' * 20) * 30) for i in range(3)])
    # await msg.qanswer(text)
    pass
    pass


async def tst2(msg: _Msg):
    print('tst2')
    com.rem_from_queue(msg.channel.id, keys)
    print(com.msg_queue)
    print(com.msg_args)
    # com.msg_args = {}
    # for k in keys:
    #     if k in com.msg_queue.get(msg.channel.id, []):
    #         com.msg_queue[msg.channel.id].remove(k)


async def tst3(msg: _Msg):
    print(msgs)


async def tst4(msg: _Msg):
    for o in msgs:
        for m in msgs[o]:
            await C.client.delete_message(m)


async def tst_2(msg: _Msg):
    if len(msg.args) < 2:
        await msg.qanswer(other.comfortable_help([str(dominate.__doc__)]))
        return
    if not msg.admin and msg.author != C.users['Creol']:
        await msg.answer(r'–ù–µ—Ç —É –≤–∞—Å –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ¬Ø\_(„ÉÑ)_/¬Ø')
        return

    auth = msg.find_member(msg.author)
    who = msg.find_member(msg.args[1])
    if not auth or not who:
        await msg.qanswer(other.comfortable_help([str(dominate.__doc__)]))
        return
    emb = discord.Embed(title=msg.original[len('!dominate ' + msg.args[1] + ' '):], color=auth.color)
    emb.set_author(name=auth.nick or auth.name, icon_url=auth.avatar_url)
    emb.set_image(url='https://cdn.discordapp.com/attachments/420056219068399617/450428811725766667/dominate.gif')
    emb.add_field(name='f1', value='it is f1')
    emb.add_field(name='f2', value='it is f2')
    emb.set_footer(text='it is footer', icon_url=msg.cmd_server.me.avatar_url)
    #emb.set_footer(text='')
    await msg.answer(text=who.mention, emb=emb)
    # ch = C.client.get_channel('398645007944384513')
    # await C.client.send_typing(ch)
    # await C.client.send_typing(ch)
    # await C.client.send_file(ch, 'pic/mushroom spores.jpg',content=
    # '*–ë–µ–∫–∫–µ—Ç –Ω—ã–Ω—á–µ –ø–æ –ª–µ—Å—É –≥—É–ª—è–ª,\n–ì—Ä–∏–±–æ—á–∫–∏ –ø–æ —Ç–∏—Ö–æ–º—É –æ–Ω —Å–æ–±–∏—Ä–∞–ª,'
    # '\n–ù–æ—á—å –≤—Å—è –ø—Ä–æ—à–ª–∞ - –ë–µ–∫–∫–∏ —É—Å—Ç–∞–ª,\n–ò —Å–ø–æ—Ä—ã –≥—Ä–∏–±–Ω—ã–µ –æ–Ω —Ç—É—Ç —É—Å–ª—ã—Ö–∞–ª...*')


async def roles(msg: _Msg):
    #await msg.answer(', '.join(msg.roles))
    return


async def get_invite(msg: _Msg):
    # invs = await C.client.invites_from(msg.server)
    # await msg.qanswer(msg.server.name + ':\n\t' + '\n\t'.join([inv.code for inv in invs]))
    inv = await C.client.create_invite(msg.cmd_server) # Not working with server?
    await msg.qanswer(msg.cmd_server.name + ': ' + inv.code)

'''
async def song(msg: _msg):
    await C.client.send_message(C.channels['FM'], "+np")

    def check(m):
        return m.embeds and 'Now Playing ‚ô™' in m.embeds[0]['author']['name']

    message = await C.client.wait_for_message(timeout=5, channel=C.channels['FM'], check=check)
    if not message: # None
        await msg.answer('–ù–µ –∏–≥—Ä–∞–µ—Ç –Ω—ã–Ω—á–µ –Ω–∏—á–µ–≥–æ –≤ –¥–∞–Ω–Ω–æ–º –¥–æ–º–µ–Ω–µ.')
    else:
        embed = message.embeds[0]
        em = C.discord.Embed(**embed)
        em.set_thumbnail(url=embed['thumbnail']['url'])
        em.set_author(name=embed['author']['name'], url=embed['author']['url'], icon_url=embed['author']['icon_url'])
        await msg.answer(emb=em)
'''
# endregion
# endregion

all_cmds = set(key for key in dir(sys.modules[__name__]) if key[0] != '_' and callable(getattr(sys.modules[__name__], key)))
only_super = all_cmds.difference(admin_cmds.union(primogenat_cmds).union(free_cmds))
